{
  "address": "0x591FD3027F77D18b7Bf40E00bD8148F679480b89",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_twitterVerifyAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "linkTokenAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "rngAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "Pool",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "PoolOwner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "SubmissionEndTime",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "FanVotingEndTime",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "BrandVotingEndTime",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "CampaignEndtime",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "PoolId",
          "type": "uint256"
        }
      ],
      "name": "PoolCreated",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "LINK_CONTRACT_ADDRESS",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "TWITTER_VERIFY_ADDRESS",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "allowPoolCreation",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_bool",
          "type": "bool"
        }
      ],
      "name": "changePoolCreationBool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_poolName",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "_capital",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_capitalAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_nftAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_campaignLength",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_votingLength",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_decisionLength",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_submissionLength",
          "type": "uint256"
        }
      ],
      "name": "createPool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        }
      ],
      "name": "getPoolAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPoolCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "poolCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "poolList",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "setTwitterVerifyAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x980222db73596a0ed1c89df57d275190739430a917bb1fbfc115ab665cc2a3cc",
  "receipt": {
    "to": null,
    "from": "0x0f0376f7f6C775C0d138eb584B7d6284eccCf8eA",
    "contractAddress": "0x591FD3027F77D18b7Bf40E00bD8148F679480b89",
    "transactionIndex": 0,
    "gasUsed": "3284189",
    "logsBloom": "0x
    "blockHash": "0x9136ad3f5a1997be959eaf6605cd567b364dc4c11f0daa2cab65bc5dec769079",
    "transactionHash": "0x980222db73596a0ed1c89df57d275190739430a917bb1fbfc115ab665cc2a3cc",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 14400827,
        "transactionHash": "0x980222db73596a0ed1c89df57d275190739430a917bb1fbfc115ab665cc2a3cc",
        "address": "0x591FD3027F77D18b7Bf40E00bD8148F679480b89",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000000f0376f7f6c775c0d138eb584b7d6284ecccf8ea"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x9136ad3f5a1997be959eaf6605cd567b364dc4c11f0daa2cab65bc5dec769079"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 14400827,
        "transactionHash": "0x980222db73596a0ed1c89df57d275190739430a917bb1fbfc115ab665cc2a3cc",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x0000000000000000000000000f0376f7f6c775c0d138eb584b7d6284ecccf8ea",
          "0x000000000000000000000000e4b8e9222704401ad16d4d826732953daf07c7e2"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000074ad866333d4000000000000000000000000000000000000000000000000000170e996f556e40000000000000000000000000000000000000000000000000001546b5a9c971a0000000000000000000000000000000000000000000000000000fc3c109223100000000000000000000000000000000000000000000000000001c918e0ffcaee00",
        "logIndex": 1,
        "blockHash": "0x9136ad3f5a1997be959eaf6605cd567b364dc4c11f0daa2cab65bc5dec769079"
      }
    ],
    "blockNumber": 14400827,
    "cumulativeGasUsed": "3284189",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x40dfefA04c7Ee8555F989B10e07196FBe4860915",
    "0x326C977E6efc84E512bB9C30f76E30c160eD06FB",
    "0xcE26F8e15e3c7655f9581caCfd7C17f8A31450c8"
  ],
  "solcInputHash": "ff2fa8ba0d90131797950665a178586f",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_twitterVerifyAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"linkTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"rngAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"Pool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"PoolOwner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"SubmissionEndTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"FanVotingEndTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"BrandVotingEndTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"CampaignEndtime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"PoolId\",\"type\":\"uint256\"}],\"name\":\"PoolCreated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"LINK_CONTRACT_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TWITTER_VERIFY_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allowPoolCreation\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_bool\",\"type\":\"bool\"}],\"name\":\"changePoolCreationBool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_poolName\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_capital\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_capitalAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_nftAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_campaignLength\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_votingLength\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_decisionLength\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_submissionLength\",\"type\":\"uint256\"}],\"name\":\"createPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getPoolAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPoolCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"poolList\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setTwitterVerifyAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"PoolCreated(address,address,uint256,uint256,uint256,uint256,uint256)\":{\"details\":\"emitted when a pool is created\",\"params\":{\"BrandVotingEndTime\":\"unix timestamp for when the brand voting period is over\",\"CampaignEndtime\":\"unix timestamp for when the campaign is over\",\"FanVotingEndTime\":\"unix timestamp for when the fan voting period is over\",\"Pool\":\"the address of the pool\",\"PoolId\":\"the id this pool is stored under in poolList*\",\"PoolOwner\":\"the address of the pool owner\",\"SubmissionEndTime\":\"unix timestamp for when the submission period is over\"}}},\"kind\":\"dev\",\"methods\":{\"createPool(string,uint256,address,address,uint256,uint256,uint256,uint256)\":{\"details\":\"Allows caller to create a custom brand pool, as long as they are verified, and have approved the contract to spend 0.1 Link  TODO add require checks to make sure inputs are logical*\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/PoolFactory.sol\":\"PoolFactory\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x1cae4f85f114ff17b90414f5da67365b1d00337abb5bce9bf944eb78a2c0673c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xf8e8d118a7a8b2e134181f7da655f6266aa3a0f9134b2605747139fcb0c5d835\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n      * @dev Safely transfers `tokenId` token from `from` to `to`.\\n      *\\n      * Requirements:\\n      *\\n      * - `from` cannot be the zero address.\\n      * - `to` cannot be the zero address.\\n      * - `tokenId` token must exist and be owned by `from`.\\n      * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n      * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n      *\\n      * Emits a {Transfer} event.\\n      */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n}\\n\",\"keccak256\":\"0xc1c941ad1e580b4623007305921efe2f26fc7320a4edc226234dd707c658a428\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xf930d2df426bfcfc1f7415be724f04081c96f4fb9ec8d0e3a521c07692dface0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa28007762d9da9db878dd421960c8cb9a10471f47ab5c1b3309bfe48e9e79ff4\",\"license\":\"MIT\"},\"contracts/Pool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\n\\ninterface iRandomNumberGenerator {\\n    function getRandomNumber(uint256 userProvidedSeed)\\n        external\\n        returns (bytes32 requestId);\\n\\n    function seeRandomNumber() external returns (uint256);\\n}\\n\\n//TODO instead of distributing rewards, there should be a new settling contract created where the artist and brand can have a back and forth over the design of the final NFT\\n//This contract would pay out the rewards\\n//TODO add support for another ERC20 token that can be used as a prize pool for first second and third submissions.\\ncontract Pool {\\n    address poolOwner;\\n    IERC20 private token; //The input token for the pool campaign usually CRTV\\n    IERC721 private nft;\\n    iRandomNumberGenerator private rng;\\n    string public poolName; //Brand can call the pool whatever they want IE \\\"Campaign to design the next Coca Cola Bear NFT\\\"\\n    string public brandName; //Pulled from Twitter handle is not changeable\\n    uint256 public funds; //Capital Pool owner deposits to start pool!\\n    uint256 public submissionEndTime;\\n    uint256 public fanVotingEndTime;\\n    uint256 public brandVotingEndTime;\\n    uint256 public campaignEndTime;\\n    bool public topTenFound;\\n    uint256[10] public topTen;\\n    uint256[10] public topTenAmount;\\n    uint256[] finalists;\\n    uint256[] finalistsAmounts;\\n    uint256 winningSubmission; // Index of the winning submission\\n    uint256 userDeposit; // Amount of funds required to make a submission and vote\\n    bool winnerSelected;\\n    uint256 searchIndex; //stores the last index that was cheked for top ten calcualtion\\n    bool checkedForTies;\\n    uint256 finalistsCount;\\n    bool public backedByFunds;\\n\\n    struct User {\\n        address user;\\n        uint256 amount;\\n    }\\n\\n    struct submission {\\n        uint256[] nftList;\\n        mapping(address => uint256) userIndex;\\n        User[] users;\\n        uint256 userCount;\\n    }\\n\\n    mapping(uint256 => submission) public submissions;\\n    uint256 submissionCount = 1;\\n\\n    /**\\n     * @dev emitted when a pool is backed with enough campaign funds\\n     * @param PoolAddress address of the pool\\n     * @param PoolName name of the pool\\n     * @param BrandName name of the brand running the campaign\\n     * @param BackedByFunds bool showing whether the pool is backed by funds for not.\\n     **/\\n    event PoolBacked(\\n        address PoolAddress,\\n        string PoolName,\\n        string BrandName,\\n        bool BackedByFunds\\n    );\\n\\n    /**\\n     * @dev emitted when a pool owner changes the pool name\\n     * @param PoolAddress address of the pool\\n     * @param PoolName name of the pool\\n     * @param BrandName name of the brand running the campaign\\n     **/\\n    event PoolNameChanged(\\n        address PoolAddress,\\n        string PoolName,\\n        string BrandName\\n    );\\n\\n    /**\\n     * @dev emitted when an artist created a submission\\n     * @param PoolAddress address of the pool\\n     * @param PoolName name of the pool\\n     * @param BrandName name of the brand running the campaign\\n     * @param SubmissionNumber the number assigned to this submission, when emitted this also represents total submission count\\n     * @param ArtistAddress the address of the artist who created the submission\\n     * @param NFTsInSubmission an array of uints that hold the token ids of the NFTs in the submission\\n     **/\\n    event SubmissionCreated(\\n        address PoolAddress,\\n        string PoolName,\\n        string BrandName,\\n        uint256 SubmissionNumber,\\n        address ArtistAddress,\\n        uint256[3] NFTsInSubmission\\n    );\\n\\n    /**\\n     * @dev emitted when a fan votes on a submission\\n     * @param PoolAddress address of the pool\\n     * @param PoolName name of the pool\\n     * @param BrandName name of the brand running the campaign\\n     * @param SubmissionNumber the submission number the fan voted for\\n     * @param Voter the address of the fan that made the vote\\n     * @param NewVoteCount the new total vote count for that submission\\n     **/\\n    event VoteSubmitted(\\n        address PoolAddress,\\n        string PoolName,\\n        string BrandName,\\n        uint256 SubmissionNumber,\\n        address Voter,\\n        uint256 NewVoteCount\\n    );\\n\\n    /**\\n     * @dev emitted when the Top Ten list changes from a fan vote\\n     * @param PoolAddress address of the pool\\n     * @param PoolName name of the pool\\n     * @param BrandName name of the brand running the campaign\\n     * @param TopTen the top ten submissions, an array of indexes, so if submission 1 is in it, 1 would be in the top ten\\n     **/\\n    event NewTopTen(\\n        address PoolAddress,\\n        string PoolName,\\n        string BrandName,\\n        uint256[10] TopTen\\n        );\\n\\n    /**\\n     * @dev emitted when finalists list has been created\\n     * @param PoolAddress address of the pool\\n     * @param PoolName name of the pool\\n     * @param BrandName name of the brand running the campaign\\n     * @param Finalists an array of of indexing corresponding to the submission numbers that are finalists\\n     **/\\n    event SeeFinalists(\\n        address PoolAddress,\\n        string PoolName,\\n        string BrandName,\\n        uint256[] Finalists\\n        );\\n\\n        /**\\n     * @dev emitted when the winner is chosen\\n     * @param PoolAddress address of the pool\\n     * @param PoolName name of the pool\\n     * @param BrandName name of the brand running the campaign\\n     * @param Winner the winning submission number\\n     **/\\n    event WinnerSelected(\\n        address PoolAddress,\\n        string PoolName,\\n        string BrandName,\\n        uint256 Winner\\n        );\\n\\n    /**\\n     * @dev emitted when a someone calls cashout\\n     * @param PoolAddress address of the pool\\n     * @param PoolName name of the pool\\n     * @param BrandName name of the brand running the campaign\\n     * @param SubmissionNumber the submission number the fan voted for\\n     * @param Caller the address of the caller who cashed out\\n     **/\\n    event CashedOut(\\n        address PoolAddress,\\n        string PoolName,\\n        string BrandName,\\n        uint256 SubmissionNumber,\\n        address Caller\\n    );\\n\\n    //TODO add in event for when settling contract is created\\n\\n    /**\\n     * @dev functions affected by this modifier can only be called by the pool owner\\n     **/\\n    modifier onlyPoolOwner() {\\n        require(\\n            msg.sender == poolOwner,\\n            \\\"Only the Pool Owner can call this function!\\\"\\n        );\\n        _;\\n    }\\n\\n    /**\\n     * @dev functions affected by this modifier can only be called by fans\\n     **/\\n    modifier onlyFans() {\\n        require(msg.sender != poolOwner, \\\"Only Fans can call this function!\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev functions affected by this modifier are onyl callable\\n     * when the pool has been backed by funds\\n     **/\\n    modifier checkFunds() {\\n        require(backedByFunds, \\\"Pool is not backed by funds!\\\");\\n        _;\\n    }\\n\\n    constructor(\\n        string memory _poolName,\\n        string memory _brandName,\\n        uint256 _capital,\\n        address _capitalAddress,\\n        address _nftAddress,\\n        address _poolOwner,\\n        address _rng,\\n        uint256 _campaignLength,\\n        uint256 _votingLength,\\n        uint256 _decisionLength,\\n        uint256 _submissionLength\\n    ) {\\n        poolOwner = _poolOwner;\\n        funds = _capital;\\n        token = IERC20(_capitalAddress);\\n\\n        userDeposit = funds / 10;\\n        nft = IERC721(_nftAddress);\\n        rng = iRandomNumberGenerator(_rng);\\n\\n        poolName = _poolName;\\n        brandName = _brandName;\\n        uint256 currentTime = block.timestamp;\\n        submissionEndTime = currentTime + _submissionLength;\\n        fanVotingEndTime = submissionEndTime + _votingLength;\\n        brandVotingEndTime = fanVotingEndTime + _decisionLength;\\n        campaignEndTime = currentTime + _campaignLength;\\n    }\\n\\n    function getName() external view returns (string memory) {\\n        return poolName;\\n    }\\n\\n    /**\\n     * @dev After a pool is created, the owner needs to transfer the funds to the pool in order to back it\\n     **/\\n    function backPool() external onlyPoolOwner {\\n        require(!backedByFunds, \\\"Pool already backed by funds!\\\");\\n        require(\\n            token.transferFrom(msg.sender, address(this), funds),\\n            \\\"trandferFrom failed, pool not backed by funds!\\\"\\n        );\\n        backedByFunds = true;\\n        emit PoolBacked(address(this), poolName, brandName, backedByFunds);\\n    }\\n\\n    function changeName(string memory _name) external onlyPoolOwner {\\n        poolName = _name;\\n        emit PoolNameChanged(address(this), poolName, brandName);\\n    }\\n\\n    function seePoolBacking() external view returns (uint256) {\\n        return token.balanceOf(address(this));\\n    }\\n\\n    function getTopTen() external view returns (uint256[10] memory) {\\n        return topTen;\\n    }\\n\\n    function getTopTenAmount() external view returns (uint256[10] memory) {\\n        return topTenAmount;\\n    }\\n\\n    function getfinalists() external view returns (uint256[] memory) {\\n        return finalists;\\n    }\\n\\n    function getfinalistsAmount() external view returns (uint256[] memory) {\\n        return finalistsAmounts;\\n    }\\n\\n    /**\\n     * @dev allow artists to create submissions\\n     * Require artist to transfer userDeposit, and to transfer NFTs\\n     * @param nfts Array of 3 nfts to transfer to the contract\\n     **/\\n    function createSubmission(uint256[3] memory nfts) external checkFunds {\\n        require(\\n            block.timestamp < submissionEndTime,\\n            \\\"Can not add submissions during the fan voting period\\\"\\n        );\\n        require(\\n            token.transferFrom(msg.sender, address(this), userDeposit),\\n            \\\"trandferFrom failed, submission not backed by funds!\\\"\\n        );\\n        for (uint256 i = 0; i < 3; i++) {\\n            nft.transferFrom(msg.sender, address(this), nfts[i]); //Transfer them to the contract Think we need to do a require, we could require the nft owner is the conrtact?\\n            submissions[submissionCount].nftList.push(nfts[i]);\\n        }\\n        User memory artist = User({user: msg.sender, amount: userDeposit});\\n        submissions[submissionCount].userIndex[msg.sender] = 0; //Set artist as the 0 index\\n        submissions[submissionCount].userCount++;\\n        submissions[submissionCount].users.push(artist);\\n        emit SubmissionCreated(address(this), poolName, brandName, submissionCount, msg.sender, nfts);\\n        submissionCount++;\\n    }\\n\\n    /**\\n     * @dev allow fans to vote on submissions\\n     * Require caller transfers userDeposit to contract\\n     * @param _submissionNumber the number of the submission the fan wants to vote for\\n     **/\\n    function fanVote(uint256 _submissionNumber) external onlyFans checkFunds {\\n        //TODO I think its okay to read the zero address of an empty array, I am assuming it returns zero but I need to verify this!\\n        require(\\n            msg.sender != submissions[_submissionNumber].users[0].user,\\n            \\\"Artist can not vote for their own submission!\\\"\\n        );\\n        require(\\n            block.timestamp >= submissionEndTime,\\n            \\\"Can not start voting until submission period is over!\\\"\\n        );\\n        require(\\n            block.timestamp <= brandVotingEndTime,\\n            \\\"Fan Voting Period is Over!\\\"\\n        );\\n        require(\\n            submissions[_submissionNumber].nftList[0] > 0,\\n            \\\"There are no NFTs in this submission!\\\"\\n        );\\n        require(\\n            token.transferFrom(msg.sender, address(this), userDeposit),\\n            \\\"trandferFrom failed, vote not backed by funds!\\\"\\n        );\\n\\n        //Check if the user is already in the submission and thorw an error if they are!\\n        for (uint256 i = 1; i < submissions[_submissionNumber].userCount; i++) {\\n            if (msg.sender == submissions[_submissionNumber].users[i].user) {\\n                require(false, \\\"User has already voted for this submission!\\\");\\n            }\\n        }\\n        // If user isn't in the submission, then add them!\\n        User memory fan = User({user: msg.sender, amount: userDeposit});\\n        submissions[_submissionNumber].users.push(fan);\\n        submissions[_submissionNumber].userCount++;\\n\\n        //Calculate submission vote count\\n        uint256 votes =\\n            (submissions[_submissionNumber].userCount - 1) * userDeposit;\\n\\n        //Find topten submission with least amount of votes\\n        uint256 smallStake = topTenAmount[0];\\n        uint256 indexSmall = 0;\\n        for (uint256 i = 0; i < 10; i++) {\\n            if (topTenAmount[i] < smallStake) {\\n                smallStake = topTenAmount[i];\\n                indexSmall = i;\\n            }\\n        }\\n\\n        //Check if the submission is already in the top ten\\n        bool alreadyInTopTen = false;\\n        for (uint256 i = 0; i < 10; i++) {\\n            if (topTen[i] == _submissionNumber) {\\n                alreadyInTopTen = true;\\n                topTenAmount[i] = votes;\\n                break;\\n            }\\n        }\\n\\n        //Check if this submissions vote count is greater than the smallest. If it is replace it\\n        if (!alreadyInTopTen && (votes > topTenAmount[indexSmall])) {\\n            topTenAmount[indexSmall] = votes;\\n            topTen[indexSmall] = _submissionNumber;\\n            emit NewTopTen(address(this), poolName, brandName, topTen);\\n        }\\n\\n        emit VoteSubmitted(address(this), poolName, brandName, _submissionNumber, msg.sender, votes);\\n    }\\n\\n    /**\\n     * @dev Function scans through top ten list, and finds entry with lowest vote count\\n     * then function scans through all submissions and if it finds a submission with\\n     * an equal vote count to the lowest in the top ten, it adds it to the finalist\\n     * array.\\n     * Function also adds top ten list to the finalists array\\n     * Function also pings RNG contract to generate a new random number for when\\n     * selectWinner is called\\n     * ***WARNING unbounded for loop when looking through submissions!!!***\\n     * Might want to add a hard cap on submissions to avoid this.\\n     **/\\n    function checkForTies() external onlyPoolOwner {\\n        require(\\n            block.timestamp > fanVotingEndTime,\\n            \\\"Cannot select top ten until fan voting is over!\\\"\\n        );\\n        require(block.timestamp < campaignEndTime, \\\"Decision period is over!\\\");\\n        require(!checkedForTies, \\\"Already checked for ties\\\");\\n\\n        uint256 smallStake = topTenAmount[0];\\n        uint256 indexSmall = 0;\\n        for (uint256 i = 0; i < 10; i++) {\\n            finalists.push(topTen[i]);\\n            finalistsAmounts.push(topTenAmount[i]);\\n            finalistsCount++;\\n            if (topTenAmount[i] < smallStake) {\\n                smallStake = topTenAmount[i];\\n                indexSmall = i;\\n            }\\n        }\\n        uint256 tmpAmount;\\n        bool inTopTen;\\n        for (uint256 i = 1; i < submissionCount; i++) {\\n            tmpAmount = (submissions[i].userCount - 1) * userDeposit;\\n            if (smallStake == tmpAmount) {\\n                inTopTen = false;\\n                for (uint256 j = 0; j < 10; j++) {\\n                    //Only want to check if it is in the first top ten, don't need to go through all finalists!\\n                    if (finalists[j] == i) {\\n                        inTopTen = true;\\n                        break;\\n                    }\\n                }\\n                if (!inTopTen) {\\n                    finalists.push(i);\\n                    finalistsAmounts.push(tmpAmount);\\n                    finalistsCount++;\\n                }\\n            }\\n        }\\n        checkedForTies = true;\\n        rng.getRandomNumber(block.timestamp);\\n        emit SeeFinalists(address(this), poolName, brandName, finalists);\\n    }\\n\\n    /**\\n     * @dev Function to choose the winning submission, create a settling contract, and choose a lucky fan\\n     * @param submissionIndex index of the winning submission\\n     * TODO Remove reward distribution and instead create a settling contract\\n     **/\\n    function selectWinner(uint256 submissionIndex) external onlyPoolOwner {\\n        require(!winnerSelected, \\\"Already selected winner!\\\");\\n        require(\\n            block.timestamp > campaignEndTime,\\n            \\\"Can only choose a winner after the campaign is over!\\\"\\n        );\\n        require(checkedForTies, \\\"You have to call checkForTies first!\\\");\\n        winnerSelected = true;\\n        bool winnerInTopTen;\\n        for (uint256 i = 0; i < finalistsCount; i++) {\\n            if (submissionIndex == finalists[i]) {\\n                winnerInTopTen = true;\\n                break;\\n            }\\n        }\\n        require(\\n            winnerInTopTen,\\n            \\\"You must select a winner from the top ten list!\\\"\\n        );\\n        winningSubmission = submissionIndex;\\n        //distribute awards\\n        /*\\n        nft.transferFrom(\\n            address(this),\\n            submissions[winningSubmission].users[0].user,\\n            submissions[winningSubmission].nftList[0]\\n        );\\n        uint256 winnerIndex =\\n            (rng.seeRandomNumber() %\\n                (submissions[submissionIndex].userCount - 1)) + 1;\\n        address luckyFan = submissions[submissionIndex].users[winnerIndex].user;\\n        nft.transferFrom(\\n            address(this),\\n            luckyFan,\\n            submissions[winningSubmission].nftList[1]\\n        );\\n        nft.transferFrom(\\n            address(this),\\n            poolOwner,\\n            submissions[winningSubmission].nftList[2]\\n        );\\n        token.transfer(poolOwner, funds);\\n        */\\n        emit WinnerSelected(address(this), poolName, brandName, winningSubmission);\\n    }\\n\\n    /**\\n     * @dev Function allows artists and fans to cashout from their submissions\\n     **/\\n    function cashout(uint256 _submissionNumber) external {\\n        require(\\n            block.timestamp > campaignEndTime,\\n            \\\"Can not cashout until campaign is over!\\\"\\n        );\\n        require(\\n            msg.sender != poolOwner,\\n            \\\"Pool Owner must cashout via settling contract\\\"\\n        );\\n        require(_submissionNumber != 0, \\\"There is no zero submission!\\\");\\n        bool userFound;\\n        uint256 index;\\n        for (uint256 i = 0; i < submissions[_submissionNumber].userCount; i++) {\\n            if (submissions[_submissionNumber].users[i].user == msg.sender) {\\n                userFound = true;\\n                index = i;\\n                break;\\n            }\\n        }\\n        uint256 tmpBal = submissions[_submissionNumber].users[index].amount;\\n        submissions[_submissionNumber].users[index].amount = 0;\\n        if (userFound && index == 0) {\\n            //This is an artist that needs to withdraw funds and NFTS\\n            //Send back their NFTs if they arent the winner, and their funds. If they are the winner then just send back the funds\\n            require(token.transfer(msg.sender, tmpBal));\\n            if (_submissionNumber != winningSubmission) {\\n                for (uint256 i = 0; i < 3; i++) {\\n                    nft.transferFrom(\\n                        address(this),\\n                        msg.sender,\\n                        submissions[_submissionNumber].nftList[i]\\n                    ); //Transfer them to the contract Think we need to do a require, we could require the nft owner is the conrtact?\\n                }\\n                submissions[_submissionNumber].nftList = [0, 0, 0]; //Set the nftList equal to a list of zeroes\\n            }\\n        } else if (userFound) {\\n            //This is a fan that just needs their tokens back\\n            require(token.transfer(msg.sender, tmpBal));\\n        } else {\\n            require(false, \\\"User was not found in submission!\\\");\\n        }\\n        emit CashedOut(address(this), poolName, brandName, _submissionNumber, msg.sender);\\n    }\\n}\\n\",\"keccak256\":\"0x0d861d27b5968a4b9079570f52bbc74afa2ae910847bb357e0b7c1beb1292f3b\",\"license\":\"MIT\"},\"contracts/PoolFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport {Pool} from \\\"./Pool.sol\\\";\\n\\ninterface iTwitterVerify {\\n    function getVerification(address _user) external returns (bool); //TODO why does this need memory?\\n\\n    function getTwitterHandle(address _address)\\n        external\\n        returns (string memory);\\n}\\n\\ninterface linkToken {\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\\ninterface iRNG {\\n    function addToWhitelist(address _address) external;\\n}\\n\\ncontract PoolFactory is Ownable {\\n    bool public allowPoolCreation;\\n    mapping(uint256 => address) public poolList;\\n    uint256 public poolCount;\\n    address public TWITTER_VERIFY_ADDRESS;\\n    iTwitterVerify private twitterVerify;\\n    iRNG private rng;\\n    linkToken private link;\\n    address public LINK_CONTRACT_ADDRESS;\\n\\n    /**\\n    * @dev emitted when a pool is created\\n    * @param Pool the address of the pool\\n    * @param PoolOwner the address of the pool owner\\n    * @param SubmissionEndTime unix timestamp for when the submission period is over\\n    * @param FanVotingEndTime unix timestamp for when the fan voting period is over\\n    * @param BrandVotingEndTime unix timestamp for when the brand voting period is over\\n    * @param CampaignEndtime unix timestamp for when the campaign is over\\n    * @param PoolId the id this pool is stored under in poolList\\n    **/\\n    event PoolCreated(\\n        address Pool,\\n        address PoolOwner,\\n        uint256 SubmissionEndTime,\\n        uint256 FanVotingEndTime,\\n        uint256 BrandVotingEndTime,\\n        uint256 CampaignEndtime,\\n        uint256 PoolId\\n    );\\n\\n    constructor(\\n        address _twitterVerifyAddress,\\n        address linkTokenAddress,\\n        address rngAddress\\n    ) {\\n        TWITTER_VERIFY_ADDRESS = _twitterVerifyAddress;\\n        twitterVerify = iTwitterVerify(TWITTER_VERIFY_ADDRESS);\\n        rng = iRNG(rngAddress);\\n        LINK_CONTRACT_ADDRESS = linkTokenAddress;\\n        link = linkToken(LINK_CONTRACT_ADDRESS);\\n    }\\n\\n    function setTwitterVerifyAddress(address _address) external onlyOwner {\\n        TWITTER_VERIFY_ADDRESS = _address;\\n        twitterVerify = iTwitterVerify(TWITTER_VERIFY_ADDRESS);\\n    }\\n\\n    function changePoolCreationBool(bool _bool) external onlyOwner {\\n        allowPoolCreation = _bool;\\n    }\\n\\n    function getPoolAddress(uint256 _index) external view returns (address) {\\n        return poolList[_index];\\n    }\\n\\n    function getPoolCount() external view returns (uint256) {\\n        return poolCount;\\n    }\\n\\n    /**\\n    * @dev Allows caller to create a custom brand pool, as long as they are verified, and have approved the contract to spend 0.1 Link \\n    * TODO add require checks to make sure inputs are logical\\n    **/\\n    function createPool(\\n        string memory _poolName,\\n        uint256 _capital,\\n        address _capitalAddress,\\n        address _nftAddress,\\n        uint256 _campaignLength,\\n        uint256 _votingLength,\\n        uint256 _decisionLength,\\n        uint256 _submissionLength\\n    ) external {\\n        require(allowPoolCreation, \\\"Pool creation is currently not allowed!\\\");\\n        require(\\n            twitterVerify.getVerification(msg.sender),\\n            \\\"Caller address is not verified with Twitter!\\\"\\n        );\\n        require(\\n            link.transferFrom(msg.sender, address(rng), 1 * (10**17)),\\n            \\\"Link transferFrom failed!\\\"\\n        );\\n        string memory brandName = twitterVerify.getTwitterHandle(msg.sender);\\n        Pool pool =\\n            new Pool(\\n                _poolName,\\n                brandName,\\n                _capital,\\n                _capitalAddress,\\n                _nftAddress,\\n                msg.sender,\\n                address(rng),\\n                _campaignLength,\\n                _votingLength,\\n                _decisionLength,\\n                _submissionLength\\n            );\\n        uint submissionEndTime;\\n        uint fanVotingEndTime;\\n        uint brandVotingEndTime;\\n        uint campaignEndTime;\\n        uint256 currentTime = block.timestamp;\\n        submissionEndTime = currentTime + _submissionLength;\\n        fanVotingEndTime = submissionEndTime + _votingLength;\\n        brandVotingEndTime = fanVotingEndTime + _decisionLength;\\n        campaignEndTime = currentTime + _campaignLength;\\n        emit PoolCreated(\\n            address(pool),\\n            msg.sender,\\n            submissionEndTime,\\n            fanVotingEndTime,\\n            brandVotingEndTime,\\n            campaignEndTime,\\n            poolCount\\n        );\\n        poolList[poolCount] = address(pool);\\n        poolCount++;\\n        rng.addToWhitelist(address(pool));\\n    }\\n}\\n\",\"keccak256\":\"0x1d0f9f52a222499edae8e458efb1230b1fee7752919bcf6e24c9d1f0d84c1ae7\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5060405161392f38038061392f83398101604081905261002f916100e8565b600080546001600160a01b031916339081178255604051909182917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a350600380546001600160a01b039485166001600160a01b031991821681179092556004805482169092179091556005805492851692821692909217909155600780549290931691811682179092556006805490921617905561012a565b80516001600160a01b03811681146100e357600080fd5b919050565b6000806000606084860312156100fc578283fd5b610105846100cc565b9250610113602085016100cc565b9150610121604085016100cc565b90509250925092565b6137f6806101396000396000f3fe60806040523480156200001157600080fd5b5060043610620000df5760003560e01c80638eec5d701162000097578063ea6fe47e116200006e578063ea6fe47e14620001e3578063f2fde38b14620001f7578063f525cb68146200020e578063f8b0e45e146200021857600080fd5b80638eec5d7014620001a5578063d1954fca14620001b8578063de58ba2014620001cf57600080fd5b8062a5ae2114620000e45780632a48235b146200012d57806364c3c3431462000159578063715018a614620001725780637bc2ae7c146200017c5780638da5cb5b1462000193575b600080fd5b62000110620000f536600462000ab3565b6000908152600160205260409020546001600160a01b031690565b6040516001600160a01b0390911681526020015b60405180910390f35b620001106200013e36600462000ab3565b6001602052600090815260409020546001600160a01b031681565b620001706200016a36600462000923565b6200023e565b005b6200017062000292565b620001706200018d366004620009e3565b62000309565b6000546001600160a01b031662000110565b6002545b60405190815260200162000124565b62000170620001c9366004620008ff565b6200078c565b60035462000110906001600160a01b031681565b60075462000110906001600160a01b031681565b6200017062000208366004620008ff565b620007e5565b620001a960025481565b6000546200022d90600160a01b900460ff1681565b604051901515815260200162000124565b6000546001600160a01b03163314620002745760405162461bcd60e51b81526004016200026b9062000b7b565b60405180910390fd5b60008054911515600160a01b0260ff60a01b19909216919091179055565b6000546001600160a01b03163314620002bf5760405162461bcd60e51b81526004016200026b9062000b7b565b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b600054600160a01b900460ff16620003745760405162461bcd60e51b815260206004820152602760248201527f506f6f6c206372656174696f6e2069732063757272656e746c79206e6f7420616044820152666c6c6f7765642160c81b60648201526084016200026b565b60048054604051637fc9592d60e01b815233928101929092526001600160a01b031690637fc9592d90602401602060405180830381600087803b158015620003bb57600080fd5b505af1158015620003d0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620003f6919062000942565b620004595760405162461bcd60e51b815260206004820152602c60248201527f43616c6c65722061646472657373206973206e6f74207665726966696564207760448201526b69746820547769747465722160a01b60648201526084016200026b565b6006546005546040516323b872dd60e01b81523360048201526001600160a01b03918216602482015267016345785d8a000060448201529116906323b872dd90606401602060405180830381600087803b158015620004b757600080fd5b505af1158015620004cc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620004f2919062000942565b620005405760405162461bcd60e51b815260206004820152601960248201527f4c696e6b207472616e7366657246726f6d206661696c6564210000000000000060448201526064016200026b565b60048054604051633c56b49960e21b815233928101929092526000916001600160a01b039091169063f15ad26490602401600060405180830381600087803b1580156200058c57600080fd5b505af1158015620005a1573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052620005cb919081019062000961565b9050600089828a8a8a33600560009054906101000a90046001600160a01b03168c8c8c8c604051620005fd90620008d4565b620006139b9a9998979695949392919062000afa565b604051809103906000f08015801562000630573d6000803e3d6000fd5b50905060008080804262000645888262000c0f565b9450620006538a8662000c0f565b935062000661898562000c0f565b92506200066f8b8262000c0f565b600254604080516001600160a01b038a168152336020820152908101889052606081018790526080810186905260a0810183905260c08101919091529092507fd7e50dd3c6c7b206a2335aff0d56d020203676dbf26d1c4a0a026d43c6ae342e9060e00160405180910390a160028054600090815260016020526040812080546001600160a01b0319166001600160a01b038a1617905581549190620007158362000c5d565b909155505060055460405163e43252d760e01b81526001600160a01b0388811660048301529091169063e43252d790602401600060405180830381600087803b1580156200076257600080fd5b505af115801562000777573d6000803e3d6000fd5b50505050505050505050505050505050505050565b6000546001600160a01b03163314620007b95760405162461bcd60e51b81526004016200026b9062000b7b565b600380546001600160a01b039092166001600160a01b0319928316811790915560048054909216179055565b6000546001600160a01b03163314620008125760405162461bcd60e51b81526004016200026b9062000b7b565b6001600160a01b038116620008795760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016200026b565b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b612b078062000cba83390190565b80356001600160a01b0381168114620008fa57600080fd5b919050565b60006020828403121562000911578081fd5b6200091c82620008e2565b9392505050565b60006020828403121562000935578081fd5b81356200091c8162000ca7565b60006020828403121562000954578081fd5b81516200091c8162000ca7565b60006020828403121562000973578081fd5b815167ffffffffffffffff8111156200098a578182fd5b8201601f810184136200099b578182fd5b8051620009b2620009ac8262000be4565b62000bb0565b818152856020838501011115620009c7578384fd5b620009da82602083016020860162000c2a565b95945050505050565b600080600080600080600080610100898b03121562000a00578384fd5b883567ffffffffffffffff81111562000a17578485fd5b8901601f81018b1362000a28578485fd5b803562000a39620009ac8262000be4565b8181528c602083850101111562000a4e578687fd5b816020840160208301378660208383010152809a505050506020890135965062000a7b60408a01620008e2565b955062000a8b60608a01620008e2565b979a969950949760808101359660a0820135965060c0820135955060e0909101359350915050565b60006020828403121562000ac5578081fd5b5035919050565b6000815180845262000ae681602086016020860162000c2a565b601f01601f19169290920160200192915050565b600061016080835262000b108184018f62000acc565b9050828103602084015262000b26818e62000acc565b604084019c909c5250506001600160a01b039889166060820152968816608088015294871660a08701529290951660c085015260e0840152610100830193909352610120820192909252610140015292915050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b604051601f8201601f1916810167ffffffffffffffff8111828210171562000bdc5762000bdc62000c91565b604052919050565b600067ffffffffffffffff82111562000c015762000c0162000c91565b50601f01601f191660200190565b6000821982111562000c255762000c2562000c7b565b500190565b60005b8381101562000c4757818101518382015260200162000c2d565b8381111562000c57576000848401525b50505050565b600060001982141562000c745762000c7462000c7b565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b801515811462000cb657600080fd5b5056fe60806040526001602a553480156200001657600080fd5b5060405162002b0738038062002b078339810160408190526200003991620002a6565b600080546001600160a01b038089166001600160a01b03199283161790925560068b905560018054928b16929091169190911790556200007b600a8a620003b6565b602355600280546001600160a01b03808a166001600160a01b03199283161790925560038054928816929091169190911790558a51620000c39060049060208e019062000130565b508951620000d99060059060208d019062000130565b5042620000e7828262000391565b6007819055620000f990859062000391565b60088190556200010b90849062000391565b6009556200011a858262000391565b600a55506200042a9a5050505050505050505050565b8280546200013e90620003d7565b90600052602060002090601f016020900481019282620001625760008555620001ad565b82601f106200017d57805160ff1916838001178555620001ad565b82800160010185558215620001ad579182015b82811115620001ad57825182559160200191906001019062000190565b50620001bb929150620001bf565b5090565b5b80821115620001bb5760008155600101620001c0565b80516001600160a01b0381168114620001ee57600080fd5b919050565b600082601f83011262000204578081fd5b81516001600160401b038082111562000221576200022162000414565b604051601f8301601f19908116603f011681019082821181831017156200024c576200024c62000414565b8160405283815260209250868385880101111562000268578485fd5b8491505b838210156200028b57858201830151818301840152908201906200026c565b838211156200029c57848385830101525b9695505050505050565b60008060008060008060008060008060006101608c8e031215620002c8578687fd5b8b516001600160401b03811115620002de578788fd5b620002ec8e828f01620001f3565b60208e0151909c5090506001600160401b038111156200030a578788fd5b620003188e828f01620001f3565b9a505060408c015198506200033060608d01620001d6565b97506200034060808d01620001d6565b96506200035060a08d01620001d6565b95506200036060c08d01620001d6565b945060e08c015193506101008c015192506101208c015191506101408c015190509295989b509295989b9093969950565b60008219821115620003b157634e487b7160e01b81526011600452602481fd5b500190565b600082620003d257634e487b7160e01b81526012600452602481fd5b500490565b600181811c90821680620003ec57607f821691505b602082108114156200040e57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052604160045260246000fd5b6126cd806200043a6000396000f3fe608060405234801561001057600080fd5b50600436106101735760003560e01c80635a047364116100de578063b278fa4b11610097578063d504887c11610071578063d504887c146102e2578063ead851ea146102eb578063f3466dfa146102f3578063fe94130f146102fb57600080fd5b8063b278fa4b146102bc578063c89f2ce4146102d1578063cb300137146102da57600080fd5b80635a047364146102365780635cd68d8b146102495780637429eee1146102665780638863544114610273578063a9e732bb14610286578063ad73349e1461029957600080fd5b806347ba59c91161013057806347ba59c9146101e25780634c524be4146101f75780634c9916571461020a5780635013a15814610212578063532eaca01461021a5780635353a2d81461022357600080fd5b806312498a701461017857806317d7de7c1461019457806320196065146101a95780633c18b298146101b15780633d702099146101c6578063461f839b146101d9575b600080fd5b610181600a5481565b6040519081526020015b60405180910390f35b61019c610303565b60405161018b9190612541565b61019c610395565b6101b9610423565b60405161018b91906124fd565b6101816101d436600461210c565b61047a565b61018160095481565b6101f56101f0366004611fa1565b610491565b005b6101f561020536600461210c565b61084f565b6101f5610ab0565b610181610eea565b61018160075481565b6101f5610231366004612062565b610f6b565b6101f561024436600461210c565b610fe9565b600b546102569060ff1681565b604051901515815260200161018b565b6028546102569060ff1681565b61018161028136600461210c565b61170d565b6101f561029436600461210c565b61171d565b6101816102a736600461210c565b60296020526000908152604090206003015481565b6102c4611c20565b60405161018b91906124cb565b61018160065481565b6101f5611c57565b61018160085481565b6101b9611e0f565b61019c611e65565b6102c4611e72565b60606004805461031290612615565b80601f016020809104026020016040519081016040528092919081815260200182805461033e90612615565b801561038b5780601f106103605761010080835404028352916020019161038b565b820191906000526020600020905b81548152906001019060200180831161036e57829003601f168201915b5050505050905090565b600580546103a290612615565b80601f01602080910402602001604051908101604052809291908181526020018280546103ce90612615565b801561041b5780601f106103f05761010080835404028352916020019161041b565b820191906000526020600020905b8154815290600101906020018083116103fe57829003601f168201915b505050505081565b6060602180548060200260200160405190810160405280929190818152602001828054801561038b57602002820191906000526020600020905b81548152602001906001019080831161045d575050505050905090565b601681600a811061048a57600080fd5b0154905081565b60285460ff166104e85760405162461bcd60e51b815260206004820152601c60248201527f506f6f6c206973206e6f74206261636b65642062792066756e6473210000000060448201526064015b60405180910390fd5b60075442106105565760405162461bcd60e51b815260206004820152603460248201527f43616e206e6f7420616464207375626d697373696f6e7320647572696e6720746044820152731a194819985b881d9bdd1a5b99c81c195c9a5bd960621b60648201526084016104df565b6001546023546040516323b872dd60e01b81526001600160a01b03909216916323b872dd9161058b91339130916004016121c2565b602060405180830381600087803b1580156105a557600080fd5b505af11580156105b9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105dd9190612023565b6106465760405162461bcd60e51b815260206004820152603460248201527f7472616e6466657246726f6d206661696c65642c207375626d697373696f6e206044820152736e6f74206261636b65642062792066756e64732160601b60648201526084016104df565b60005b600381101561073c576002546001600160a01b03166323b872dd333085856003811061068557634e487b7160e01b600052603260045260246000fd5b60200201516040518463ffffffff1660e01b81526004016106a8939291906121c2565b600060405180830381600087803b1580156106c257600080fd5b505af11580156106d6573d6000803e3d6000fd5b5050602a5460009081526029602052604090209150839050826003811061070d57634e487b7160e01b600052603260045260246000fd5b60209081029190910151825460018101845560009384529190922001558061073481612650565b915050610649565b5060408051808201825233808252602354602080840191909152602a80546000908152602980845286822094825260019094018352858120819055905481529190529182206003018054919261079183612650565b9091555050602a8054600090815260296020908152604080832060029081018054600180820183559186529484902087519590920290910180546001600160a01b0319166001600160a01b03909516949094178455918501519290910191909155905490517f1eea0a51d9cf75dc1d5f774f2cf03c56178907ab0f73a5f32188a67965476c299161082e91309160049160059190339089906123f5565b60405180910390a1602a805490600061084683612650565b91905055505050565b6000546001600160a01b031633146108795760405162461bcd60e51b81526004016104df90612594565b60245460ff16156108cc5760405162461bcd60e51b815260206004820152601860248201527f416c72656164792073656c65637465642077696e6e657221000000000000000060448201526064016104df565b600a54421161093a5760405162461bcd60e51b815260206004820152603460248201527f43616e206f6e6c792063686f6f736520612077696e6e6572206166746572207460448201527368652063616d706169676e206973206f7665722160601b60648201526084016104df565b60265460ff166109985760405162461bcd60e51b8152602060048201526024808201527f596f75206861766520746f2063616c6c20636865636b466f72546965732066696044820152637273742160e01b60648201526084016104df565b6024805460ff191660011790556000805b602754811015610a0157602081815481106109d457634e487b7160e01b600052603260045260246000fd5b90600052602060002001548314156109ef5760019150610a01565b806109f981612650565b9150506109a9565b5080610a675760405162461bcd60e51b815260206004820152602f60248201527f596f75206d7573742073656c65637420612077696e6e65722066726f6d20746860448201526e6520746f702074656e206c6973742160881b60648201526084016104df565b60228290556040517fa7999556898ead0908e069fec8390ec5e1d3efef5b61f1bd12d3790919de0ce690610aa4903090600490600590879061235e565b60405180910390a15050565b6000546001600160a01b03163314610ada5760405162461bcd60e51b81526004016104df90612594565b6008544211610b435760405162461bcd60e51b815260206004820152602f60248201527f43616e6e6f742073656c65637420746f702074656e20756e74696c2066616e2060448201526e766f74696e67206973206f7665722160881b60648201526084016104df565b600a544210610b945760405162461bcd60e51b815260206004820152601860248201527f4465636973696f6e20706572696f64206973206f76657221000000000000000060448201526064016104df565b60265460ff1615610be75760405162461bcd60e51b815260206004820152601860248201527f416c726561647920636865636b656420666f722074696573000000000000000060448201526064016104df565b6016546000805b600a811015610ce2576020600c82600a8110610c1a57634e487b7160e01b600052603260045260246000fd5b0154815460018101835560009283526020909220909101556021601682600a8110610c5557634e487b7160e01b600052603260045260246000fd5b0154815460018101835560009283526020832001556027805491610c7883612650565b919050555082601682600a8110610c9f57634e487b7160e01b600052603260045260246000fd5b01541015610cd057601681600a8110610cc857634e487b7160e01b600052603260045260246000fd5b015492508091505b80610cda81612650565b915050610bee565b5060008060015b602a54811015610e1857602354600082815260296020526040902060030154610d14906001906125fe565b610d1e91906125df565b925082851415610e06576000915060005b600a811015610d86578160208281548110610d5a57634e487b7160e01b600052603260045260246000fd5b90600052602060002001541415610d745760019250610d86565b80610d7e81612650565b915050610d2f565b5081610e06576020805460018181019092557fc97bfaf2f8ee708c303a06d134f5ecd8389ae0432af62dc132a24118292866bb0182905560218054918201815560009081527f3a6357012c1a3ae0a17d304c9920310382d968ebcc4b1771f41c6b304205b5709091018490556027805491610e0083612650565b91905055505b80610e1081612650565b915050610ce9565b506026805460ff19166001179055600354604051632cdc85e960e21b81524260048201526001600160a01b039091169063b37217a490602401602060405180830381600087803b158015610e6b57600080fd5b505af1158015610e7f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ea3919061204a565b507fa229e1a2e4bf949baa1d82e8fca5b25ec618edecf7436638297ca0a95d00b6e730600460056020604051610edc9493929190612297565b60405180910390a150505050565b6001546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a082319060240160206040518083038186803b158015610f2e57600080fd5b505afa158015610f42573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f66919061204a565b905090565b6000546001600160a01b03163314610f955760405162461bcd60e51b81526004016104df90612594565b8051610fa8906004906020840190611ea9565b507f10a72d577a7c86348648b396152846654c0c3314dc10dc5a28142275bfb55e033060046005604051610fde939291906121e6565b60405180910390a150565b6000546001600160a01b031633141561104e5760405162461bcd60e51b815260206004820152602160248201527f4f6e6c792046616e732063616e2063616c6c20746869732066756e6374696f6e6044820152602160f81b60648201526084016104df565b60285460ff166110a05760405162461bcd60e51b815260206004820152601c60248201527f506f6f6c206973206e6f74206261636b65642062792066756e6473210000000060448201526064016104df565b600081815260296020526040812060020180549091906110d057634e487b7160e01b600052603260045260246000fd5b60009182526020909120600290910201546001600160a01b031633141561114f5760405162461bcd60e51b815260206004820152602d60248201527f4172746973742063616e206e6f7420766f746520666f72207468656972206f7760448201526c6e207375626d697373696f6e2160981b60648201526084016104df565b6007544210156111bf5760405162461bcd60e51b815260206004820152603560248201527f43616e206e6f7420737461727420766f74696e6720756e74696c207375626d696044820152747373696f6e20706572696f64206973206f7665722160581b60648201526084016104df565b6009544211156112115760405162461bcd60e51b815260206004820152601a60248201527f46616e20566f74696e6720506572696f64206973204f7665722100000000000060448201526064016104df565b60008181526029602052604081208054829061123d57634e487b7160e01b600052603260045260246000fd5b9060005260206000200154116112a35760405162461bcd60e51b815260206004820152602560248201527f546865726520617265206e6f204e46547320696e2074686973207375626d697360448201526473696f6e2160d81b60648201526084016104df565b6001546023546040516323b872dd60e01b81526001600160a01b03909216916323b872dd916112d891339130916004016121c2565b602060405180830381600087803b1580156112f257600080fd5b505af1158015611306573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061132a9190612023565b61138d5760405162461bcd60e51b815260206004820152602e60248201527f7472616e6466657246726f6d206661696c65642c20766f7465206e6f7420626160448201526d636b65642062792066756e64732160901b60648201526084016104df565b60015b6000828152602960205260409020600301548110156114695760008281526029602052604090206002018054829081106113da57634e487b7160e01b600052603260045260246000fd5b60009182526020909120600290910201546001600160a01b03163314156114575760405162461bcd60e51b815260206004820152602b60248201527f557365722068617320616c726561647920766f74656420666f7220746869732060448201526a7375626d697373696f6e2160a81b60648201526084016104df565b8061146181612650565b915050611390565b506040805180820182523381526023546020808301918252600085815260298252938420600280820180546001808201835591885293872086519490920290910180546001600160a01b0319166001600160a01b0390941693909317835592519190920155838352600301805491926114e183612650565b909155505060235460008381526029602052604081206003015490919061150a906001906125fe565b61151491906125df565b6016549091506000805b600a81101561158c5782601682600a811061154957634e487b7160e01b600052603260045260246000fd5b0154101561157a57601681600a811061157257634e487b7160e01b600052603260045260246000fd5b015492508091505b8061158481612650565b91505061151e565b506000805b600a8110156116035786600c82600a81106115bc57634e487b7160e01b600052603260045260246000fd5b015414156115f1576001915084601682600a81106115ea57634e487b7160e01b600052603260045260246000fd5b0155611603565b806115fb81612650565b915050611591565b50801580156116335750601682600a811061162e57634e487b7160e01b600052603260045260246000fd5b015484115b156116c25783601683600a811061165a57634e487b7160e01b600052603260045260246000fd5b015585600c83600a811061167e57634e487b7160e01b600052603260045260246000fd5b01556040517f29cddc1bc547ec52a5d235ce59b1486ca88ca0628749716343e7ec2fe9eb46f8906116b9903090600490600590600c90612226565b60405180910390a15b7fa279f508257ac833a0fb3550fc0ef0623bc2e0977e3d1791cd53273343bab3bf30600460058933896040516116fd96959493929190612479565b60405180910390a1505050505050565b600c81600a811061048a57600080fd5b600a54421161177e5760405162461bcd60e51b815260206004820152602760248201527f43616e206e6f7420636173686f757420756e74696c2063616d706169676e206960448201526673206f7665722160c81b60648201526084016104df565b6000546001600160a01b03163314156117ef5760405162461bcd60e51b815260206004820152602d60248201527f506f6f6c204f776e6572206d75737420636173686f757420766961207365747460448201526c1b1a5b99c818dbdb9d1c9858dd609a1b60648201526084016104df565b8061183c5760405162461bcd60e51b815260206004820152601c60248201527f5468657265206973206e6f207a65726f207375626d697373696f6e210000000060448201526064016104df565b60008060005b6000848152602960205260409020600301548110156118cd57600084815260296020526040902060020180543391908390811061188f57634e487b7160e01b600052603260045260246000fd5b60009182526020909120600290910201546001600160a01b031614156118bb57600192508091506118cd565b806118c581612650565b915050611842565b5060008381526029602052604081206002018054839081106118ff57634e487b7160e01b600052603260045260246000fd5b9060005260206000209060020201600101549050600060296000868152602001908152602001600020600201838154811061194a57634e487b7160e01b600052603260045260246000fd5b90600052602060002090600202016001018190555082801561196a575081155b15611b025760015460405163a9059cbb60e01b8152336004820152602481018390526001600160a01b039091169063a9059cbb90604401602060405180830381600087803b1580156119bb57600080fd5b505af11580156119cf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119f39190612023565b6119fc57600080fd5b6022548414611afd5760005b6003811015611ac757600254600086815260296020526040902080546001600160a01b03909216916323b872dd91309133919086908110611a5957634e487b7160e01b600052603260045260246000fd5b90600052602060002001546040518463ffffffff1660e01b8152600401611a82939291906121c2565b600060405180830381600087803b158015611a9c57600080fd5b505af1158015611ab0573d6000803e3d6000fd5b505050508080611abf90612650565b915050611a08565b5060408051606081018252600080825260208083018290528284018290528782526029905291909120611afb916003611f2d565b505b611be7565b8215611b955760015460405163a9059cbb60e01b8152336004820152602481018390526001600160a01b039091169063a9059cbb90604401602060405180830381600087803b158015611b5457600080fd5b505af1158015611b68573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b8c9190612023565b611afd57600080fd5b60405162461bcd60e51b815260206004820152602160248201527f5573657220776173206e6f7420666f756e6420696e207375626d697373696f6e6044820152602160f81b60648201526084016104df565b7ff2cb6e8ad7120180a3b9e171738081a6cb4c9b56aed5fbb35687f9d3cea142d730600460058733604051610edc9594939291906123a6565b611c28611f6d565b60408051610140810191829052600c805482529091600a90600d6020850180831161045d575050505050905090565b6000546001600160a01b03163314611c815760405162461bcd60e51b81526004016104df90612594565b60285460ff1615611cd45760405162461bcd60e51b815260206004820152601d60248201527f506f6f6c20616c7265616479206261636b65642062792066756e64732100000060448201526064016104df565b6001546006546040516323b872dd60e01b81526001600160a01b03909216916323b872dd91611d0991339130916004016121c2565b602060405180830381600087803b158015611d2357600080fd5b505af1158015611d37573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d5b9190612023565b611dbe5760405162461bcd60e51b815260206004820152602e60248201527f7472616e6466657246726f6d206661696c65642c20706f6f6c206e6f7420626160448201526d636b65642062792066756e64732160901b60648201526084016104df565b6028805460ff191660019081179091556040517f0b8bbd80daf66bbd8f47f16497629c353fe2619570ea082faea56cb9391fb42291611e0591309160049160059190612314565b60405180910390a1565b6060602080548060200260200160405190810160405280929190818152602001828054801561038b576020028201919060005260206000209081548152602001906001019080831161045d575050505050905090565b600480546103a290612615565b611e7a611f6d565b604080516101408101918290526016805482529091600a9060176020850180831161045d575050505050905090565b828054611eb590612615565b90600052602060002090601f016020900481019282611ed75760008555611f1d565b82601f10611ef057805160ff1916838001178555611f1d565b82800160010185558215611f1d579182015b82811115611f1d578251825591602001919060010190611f02565b50611f29929150611f8c565b5090565b828054828255906000526020600020908101928215611f1d579160200282015b82811115611f1d578251829060ff16905591602001919060010190611f4d565b604051806101400160405280600a906020820280368337509192915050565b5b80821115611f295760008155600101611f8d565b600060608284031215611fb2578081fd5b82601f830112611fc0578081fd5b6040516060810181811067ffffffffffffffff82111715611fe357611fe3612681565b604052808360608101861015611ff7578384fd5b835b6003811015612018578135835260209283019290910190600101611ff9565b509195945050505050565b600060208284031215612034578081fd5b81518015158114612043578182fd5b9392505050565b60006020828403121561205b578081fd5b5051919050565b600060208284031215612073578081fd5b813567ffffffffffffffff8082111561208a578283fd5b818401915084601f83011261209d578283fd5b8135818111156120af576120af612681565b604051601f8201601f19908116603f011681019083821181831017156120d7576120d7612681565b816040528281528760208487010111156120ef578586fd5b826020860160208301379182016020019490945295945050505050565b60006020828403121561211d578081fd5b5035919050565b8054600090600181811c908083168061213e57607f831692505b602080841082141561215e57634e487b7160e01b86526022600452602486fd5b83885260208801828015612179576001811461218a576121b5565b60ff198716825282820197506121b5565b60008981526020902060005b878110156121af57815484820152908601908401612196565b83019850505b5050505050505092915050565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b038416815260606020820181905260009061220a90830185612124565b828103604084015261221c8185612124565b9695505050505050565b6001600160a01b03851681526101a060208083018290526000919061224d84830188612124565b915083820360408501526122618287612124565b92506060840191508460005b600a81101561228a5781548452928201926001918201910161226d565b5050505095945050505050565b6001600160a01b0385168152608060208083018290526000916122bc90840187612124565b83810360408501526122ce8187612124565b84810360608601528554808252868552838520925090830190845b81811015612305578354835260019384019392850192016122e9565b50909998505050505050505050565b6001600160a01b038516815260806020820181905260009061233890830186612124565b828103604084015261234a8186612124565b915050821515606083015295945050505050565b6001600160a01b038516815260806020820181905260009061238290830186612124565b82810360408401526123948186612124565b91505082606083015295945050505050565b600060018060a01b03808816835260a060208401526123c860a0840188612124565b83810360408501526123da8188612124565b60608501969096525092909216608090910152509392505050565b6001600160a01b03878116825261010060208084018290526000929061241d8584018b612124565b92508483036040860152612431838a612124565b9350876060860152818716608086015260a08501925085915060005b600381101561246a5782518452928101929181019160010161244d565b50505050979650505050505050565b600060018060a01b03808916835260c0602084015261249b60c0840189612124565b83810360408501526124ad8189612124565b60608501979097525093909316608082015260a00152509392505050565b6101408101818360005b600a8110156124f45781518352602092830192909101906001016124d5565b50505092915050565b6020808252825182820181905260009190848201906040850190845b8181101561253557835183529284019291840191600101612519565b50909695505050505050565b6000602080835283518082850152825b8181101561256d57858101830151858201604001528201612551565b8181111561257e5783604083870101525b50601f01601f1916929092016040019392505050565b6020808252602b908201527f4f6e6c792074686520506f6f6c204f776e65722063616e2063616c6c2074686960408201526a732066756e6374696f6e2160a81b606082015260800190565b60008160001904831182151516156125f9576125f961266b565b500290565b6000828210156126105761261061266b565b500390565b600181811c9082168061262957607f821691505b6020821081141561264a57634e487b7160e01b600052602260045260246000fd5b50919050565b60006000198214156126645761266461266b565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fdfea26469706673582212207bf78c342af5cf6fcf515115e6912e1edd4669df79e8e63ebaf6a7c1ba40522564736f6c63430008040033a26469706673582212205b15765381fef3fd49cb263319aa7824e893a58e3cac542d151d0cecc17cd92c64736f6c63430008040033",
  "deployedBytecode": "0x60806040523480156200001157600080fd5b5060043610620000df5760003560e01c80638eec5d701162000097578063ea6fe47e116200006e578063ea6fe47e14620001e3578063f2fde38b14620001f7578063f525cb68146200020e578063f8b0e45e146200021857600080fd5b80638eec5d7014620001a5578063d1954fca14620001b8578063de58ba2014620001cf57600080fd5b8062a5ae2114620000e45780632a48235b146200012d57806364c3c3431462000159578063715018a614620001725780637bc2ae7c146200017c5780638da5cb5b1462000193575b600080fd5b62000110620000f536600462000ab3565b6000908152600160205260409020546001600160a01b031690565b6040516001600160a01b0390911681526020015b60405180910390f35b620001106200013e36600462000ab3565b6001602052600090815260409020546001600160a01b031681565b620001706200016a36600462000923565b6200023e565b005b6200017062000292565b620001706200018d366004620009e3565b62000309565b6000546001600160a01b031662000110565b6002545b60405190815260200162000124565b62000170620001c9366004620008ff565b6200078c565b60035462000110906001600160a01b031681565b60075462000110906001600160a01b031681565b6200017062000208366004620008ff565b620007e5565b620001a960025481565b6000546200022d90600160a01b900460ff1681565b604051901515815260200162000124565b6000546001600160a01b03163314620002745760405162461bcd60e51b81526004016200026b9062000b7b565b60405180910390fd5b60008054911515600160a01b0260ff60a01b19909216919091179055565b6000546001600160a01b03163314620002bf5760405162461bcd60e51b81526004016200026b9062000b7b565b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b600054600160a01b900460ff16620003745760405162461bcd60e51b815260206004820152602760248201527f506f6f6c206372656174696f6e2069732063757272656e746c79206e6f7420616044820152666c6c6f7765642160c81b60648201526084016200026b565b60048054604051637fc9592d60e01b815233928101929092526001600160a01b031690637fc9592d90602401602060405180830381600087803b158015620003bb57600080fd5b505af1158015620003d0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620003f6919062000942565b620004595760405162461bcd60e51b815260206004820152602c60248201527f43616c6c65722061646472657373206973206e6f74207665726966696564207760448201526b69746820547769747465722160a01b60648201526084016200026b565b6006546005546040516323b872dd60e01b81523360048201526001600160a01b03918216602482015267016345785d8a000060448201529116906323b872dd90606401602060405180830381600087803b158015620004b757600080fd5b505af1158015620004cc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620004f2919062000942565b620005405760405162461bcd60e51b815260206004820152601960248201527f4c696e6b207472616e7366657246726f6d206661696c6564210000000000000060448201526064016200026b565b60048054604051633c56b49960e21b815233928101929092526000916001600160a01b039091169063f15ad26490602401600060405180830381600087803b1580156200058c57600080fd5b505af1158015620005a1573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052620005cb919081019062000961565b9050600089828a8a8a33600560009054906101000a90046001600160a01b03168c8c8c8c604051620005fd90620008d4565b620006139b9a9998979695949392919062000afa565b604051809103906000f08015801562000630573d6000803e3d6000fd5b50905060008080804262000645888262000c0f565b9450620006538a8662000c0f565b935062000661898562000c0f565b92506200066f8b8262000c0f565b600254604080516001600160a01b038a168152336020820152908101889052606081018790526080810186905260a0810183905260c08101919091529092507fd7e50dd3c6c7b206a2335aff0d56d020203676dbf26d1c4a0a026d43c6ae342e9060e00160405180910390a160028054600090815260016020526040812080546001600160a01b0319166001600160a01b038a1617905581549190620007158362000c5d565b909155505060055460405163e43252d760e01b81526001600160a01b0388811660048301529091169063e43252d790602401600060405180830381600087803b1580156200076257600080fd5b505af115801562000777573d6000803e3d6000fd5b50505050505050505050505050505050505050565b6000546001600160a01b03163314620007b95760405162461bcd60e51b81526004016200026b9062000b7b565b600380546001600160a01b039092166001600160a01b0319928316811790915560048054909216179055565b6000546001600160a01b03163314620008125760405162461bcd60e51b81526004016200026b9062000b7b565b6001600160a01b038116620008795760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016200026b565b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b612b078062000cba83390190565b80356001600160a01b0381168114620008fa57600080fd5b919050565b60006020828403121562000911578081fd5b6200091c82620008e2565b9392505050565b60006020828403121562000935578081fd5b81356200091c8162000ca7565b60006020828403121562000954578081fd5b81516200091c8162000ca7565b60006020828403121562000973578081fd5b815167ffffffffffffffff8111156200098a578182fd5b8201601f810184136200099b578182fd5b8051620009b2620009ac8262000be4565b62000bb0565b818152856020838501011115620009c7578384fd5b620009da82602083016020860162000c2a565b95945050505050565b600080600080600080600080610100898b03121562000a00578384fd5b883567ffffffffffffffff81111562000a17578485fd5b8901601f81018b1362000a28578485fd5b803562000a39620009ac8262000be4565b8181528c602083850101111562000a4e578687fd5b816020840160208301378660208383010152809a505050506020890135965062000a7b60408a01620008e2565b955062000a8b60608a01620008e2565b979a969950949760808101359660a0820135965060c0820135955060e0909101359350915050565b60006020828403121562000ac5578081fd5b5035919050565b6000815180845262000ae681602086016020860162000c2a565b601f01601f19169290920160200192915050565b600061016080835262000b108184018f62000acc565b9050828103602084015262000b26818e62000acc565b604084019c909c5250506001600160a01b039889166060820152968816608088015294871660a08701529290951660c085015260e0840152610100830193909352610120820192909252610140015292915050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b604051601f8201601f1916810167ffffffffffffffff8111828210171562000bdc5762000bdc62000c91565b604052919050565b600067ffffffffffffffff82111562000c015762000c0162000c91565b50601f01601f191660200190565b6000821982111562000c255762000c2562000c7b565b500190565b60005b8381101562000c4757818101518382015260200162000c2d565b8381111562000c57576000848401525b50505050565b600060001982141562000c745762000c7462000c7b565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b801515811462000cb657600080fd5b5056fe60806040526001602a553480156200001657600080fd5b5060405162002b0738038062002b078339810160408190526200003991620002a6565b600080546001600160a01b038089166001600160a01b03199283161790925560068b905560018054928b16929091169190911790556200007b600a8a620003b6565b602355600280546001600160a01b03808a166001600160a01b03199283161790925560038054928816929091169190911790558a51620000c39060049060208e019062000130565b508951620000d99060059060208d019062000130565b5042620000e7828262000391565b6007819055620000f990859062000391565b60088190556200010b90849062000391565b6009556200011a858262000391565b600a55506200042a9a5050505050505050505050565b8280546200013e90620003d7565b90600052602060002090601f016020900481019282620001625760008555620001ad565b82601f106200017d57805160ff1916838001178555620001ad565b82800160010185558215620001ad579182015b82811115620001ad57825182559160200191906001019062000190565b50620001bb929150620001bf565b5090565b5b80821115620001bb5760008155600101620001c0565b80516001600160a01b0381168114620001ee57600080fd5b919050565b600082601f83011262000204578081fd5b81516001600160401b038082111562000221576200022162000414565b604051601f8301601f19908116603f011681019082821181831017156200024c576200024c62000414565b8160405283815260209250868385880101111562000268578485fd5b8491505b838210156200028b57858201830151818301840152908201906200026c565b838211156200029c57848385830101525b9695505050505050565b60008060008060008060008060008060006101608c8e031215620002c8578687fd5b8b516001600160401b03811115620002de578788fd5b620002ec8e828f01620001f3565b60208e0151909c5090506001600160401b038111156200030a578788fd5b620003188e828f01620001f3565b9a505060408c015198506200033060608d01620001d6565b97506200034060808d01620001d6565b96506200035060a08d01620001d6565b95506200036060c08d01620001d6565b945060e08c015193506101008c015192506101208c015191506101408c015190509295989b509295989b9093969950565b60008219821115620003b157634e487b7160e01b81526011600452602481fd5b500190565b600082620003d257634e487b7160e01b81526012600452602481fd5b500490565b600181811c90821680620003ec57607f821691505b602082108114156200040e57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052604160045260246000fd5b6126cd806200043a6000396000f3fe608060405234801561001057600080fd5b50600436106101735760003560e01c80635a047364116100de578063b278fa4b11610097578063d504887c11610071578063d504887c146102e2578063ead851ea146102eb578063f3466dfa146102f3578063fe94130f146102fb57600080fd5b8063b278fa4b146102bc578063c89f2ce4146102d1578063cb300137146102da57600080fd5b80635a047364146102365780635cd68d8b146102495780637429eee1146102665780638863544114610273578063a9e732bb14610286578063ad73349e1461029957600080fd5b806347ba59c91161013057806347ba59c9146101e25780634c524be4146101f75780634c9916571461020a5780635013a15814610212578063532eaca01461021a5780635353a2d81461022357600080fd5b806312498a701461017857806317d7de7c1461019457806320196065146101a95780633c18b298146101b15780633d702099146101c6578063461f839b146101d9575b600080fd5b610181600a5481565b6040519081526020015b60405180910390f35b61019c610303565b60405161018b9190612541565b61019c610395565b6101b9610423565b60405161018b91906124fd565b6101816101d436600461210c565b61047a565b61018160095481565b6101f56101f0366004611fa1565b610491565b005b6101f561020536600461210c565b61084f565b6101f5610ab0565b610181610eea565b61018160075481565b6101f5610231366004612062565b610f6b565b6101f561024436600461210c565b610fe9565b600b546102569060ff1681565b604051901515815260200161018b565b6028546102569060ff1681565b61018161028136600461210c565b61170d565b6101f561029436600461210c565b61171d565b6101816102a736600461210c565b60296020526000908152604090206003015481565b6102c4611c20565b60405161018b91906124cb565b61018160065481565b6101f5611c57565b61018160085481565b6101b9611e0f565b61019c611e65565b6102c4611e72565b60606004805461031290612615565b80601f016020809104026020016040519081016040528092919081815260200182805461033e90612615565b801561038b5780601f106103605761010080835404028352916020019161038b565b820191906000526020600020905b81548152906001019060200180831161036e57829003601f168201915b5050505050905090565b600580546103a290612615565b80601f01602080910402602001604051908101604052809291908181526020018280546103ce90612615565b801561041b5780601f106103f05761010080835404028352916020019161041b565b820191906000526020600020905b8154815290600101906020018083116103fe57829003601f168201915b505050505081565b6060602180548060200260200160405190810160405280929190818152602001828054801561038b57602002820191906000526020600020905b81548152602001906001019080831161045d575050505050905090565b601681600a811061048a57600080fd5b0154905081565b60285460ff166104e85760405162461bcd60e51b815260206004820152601c60248201527f506f6f6c206973206e6f74206261636b65642062792066756e6473210000000060448201526064015b60405180910390fd5b60075442106105565760405162461bcd60e51b815260206004820152603460248201527f43616e206e6f7420616464207375626d697373696f6e7320647572696e6720746044820152731a194819985b881d9bdd1a5b99c81c195c9a5bd960621b60648201526084016104df565b6001546023546040516323b872dd60e01b81526001600160a01b03909216916323b872dd9161058b91339130916004016121c2565b602060405180830381600087803b1580156105a557600080fd5b505af11580156105b9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105dd9190612023565b6106465760405162461bcd60e51b815260206004820152603460248201527f7472616e6466657246726f6d206661696c65642c207375626d697373696f6e206044820152736e6f74206261636b65642062792066756e64732160601b60648201526084016104df565b60005b600381101561073c576002546001600160a01b03166323b872dd333085856003811061068557634e487b7160e01b600052603260045260246000fd5b60200201516040518463ffffffff1660e01b81526004016106a8939291906121c2565b600060405180830381600087803b1580156106c257600080fd5b505af11580156106d6573d6000803e3d6000fd5b5050602a5460009081526029602052604090209150839050826003811061070d57634e487b7160e01b600052603260045260246000fd5b60209081029190910151825460018101845560009384529190922001558061073481612650565b915050610649565b5060408051808201825233808252602354602080840191909152602a80546000908152602980845286822094825260019094018352858120819055905481529190529182206003018054919261079183612650565b9091555050602a8054600090815260296020908152604080832060029081018054600180820183559186529484902087519590920290910180546001600160a01b0319166001600160a01b03909516949094178455918501519290910191909155905490517f1eea0a51d9cf75dc1d5f774f2cf03c56178907ab0f73a5f32188a67965476c299161082e91309160049160059190339089906123f5565b60405180910390a1602a805490600061084683612650565b91905055505050565b6000546001600160a01b031633146108795760405162461bcd60e51b81526004016104df90612594565b60245460ff16156108cc5760405162461bcd60e51b815260206004820152601860248201527f416c72656164792073656c65637465642077696e6e657221000000000000000060448201526064016104df565b600a54421161093a5760405162461bcd60e51b815260206004820152603460248201527f43616e206f6e6c792063686f6f736520612077696e6e6572206166746572207460448201527368652063616d706169676e206973206f7665722160601b60648201526084016104df565b60265460ff166109985760405162461bcd60e51b8152602060048201526024808201527f596f75206861766520746f2063616c6c20636865636b466f72546965732066696044820152637273742160e01b60648201526084016104df565b6024805460ff191660011790556000805b602754811015610a0157602081815481106109d457634e487b7160e01b600052603260045260246000fd5b90600052602060002001548314156109ef5760019150610a01565b806109f981612650565b9150506109a9565b5080610a675760405162461bcd60e51b815260206004820152602f60248201527f596f75206d7573742073656c65637420612077696e6e65722066726f6d20746860448201526e6520746f702074656e206c6973742160881b60648201526084016104df565b60228290556040517fa7999556898ead0908e069fec8390ec5e1d3efef5b61f1bd12d3790919de0ce690610aa4903090600490600590879061235e565b60405180910390a15050565b6000546001600160a01b03163314610ada5760405162461bcd60e51b81526004016104df90612594565b6008544211610b435760405162461bcd60e51b815260206004820152602f60248201527f43616e6e6f742073656c65637420746f702074656e20756e74696c2066616e2060448201526e766f74696e67206973206f7665722160881b60648201526084016104df565b600a544210610b945760405162461bcd60e51b815260206004820152601860248201527f4465636973696f6e20706572696f64206973206f76657221000000000000000060448201526064016104df565b60265460ff1615610be75760405162461bcd60e51b815260206004820152601860248201527f416c726561647920636865636b656420666f722074696573000000000000000060448201526064016104df565b6016546000805b600a811015610ce2576020600c82600a8110610c1a57634e487b7160e01b600052603260045260246000fd5b0154815460018101835560009283526020909220909101556021601682600a8110610c5557634e487b7160e01b600052603260045260246000fd5b0154815460018101835560009283526020832001556027805491610c7883612650565b919050555082601682600a8110610c9f57634e487b7160e01b600052603260045260246000fd5b01541015610cd057601681600a8110610cc857634e487b7160e01b600052603260045260246000fd5b015492508091505b80610cda81612650565b915050610bee565b5060008060015b602a54811015610e1857602354600082815260296020526040902060030154610d14906001906125fe565b610d1e91906125df565b925082851415610e06576000915060005b600a811015610d86578160208281548110610d5a57634e487b7160e01b600052603260045260246000fd5b90600052602060002001541415610d745760019250610d86565b80610d7e81612650565b915050610d2f565b5081610e06576020805460018181019092557fc97bfaf2f8ee708c303a06d134f5ecd8389ae0432af62dc132a24118292866bb0182905560218054918201815560009081527f3a6357012c1a3ae0a17d304c9920310382d968ebcc4b1771f41c6b304205b5709091018490556027805491610e0083612650565b91905055505b80610e1081612650565b915050610ce9565b506026805460ff19166001179055600354604051632cdc85e960e21b81524260048201526001600160a01b039091169063b37217a490602401602060405180830381600087803b158015610e6b57600080fd5b505af1158015610e7f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ea3919061204a565b507fa229e1a2e4bf949baa1d82e8fca5b25ec618edecf7436638297ca0a95d00b6e730600460056020604051610edc9493929190612297565b60405180910390a150505050565b6001546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a082319060240160206040518083038186803b158015610f2e57600080fd5b505afa158015610f42573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f66919061204a565b905090565b6000546001600160a01b03163314610f955760405162461bcd60e51b81526004016104df90612594565b8051610fa8906004906020840190611ea9565b507f10a72d577a7c86348648b396152846654c0c3314dc10dc5a28142275bfb55e033060046005604051610fde939291906121e6565b60405180910390a150565b6000546001600160a01b031633141561104e5760405162461bcd60e51b815260206004820152602160248201527f4f6e6c792046616e732063616e2063616c6c20746869732066756e6374696f6e6044820152602160f81b60648201526084016104df565b60285460ff166110a05760405162461bcd60e51b815260206004820152601c60248201527f506f6f6c206973206e6f74206261636b65642062792066756e6473210000000060448201526064016104df565b600081815260296020526040812060020180549091906110d057634e487b7160e01b600052603260045260246000fd5b60009182526020909120600290910201546001600160a01b031633141561114f5760405162461bcd60e51b815260206004820152602d60248201527f4172746973742063616e206e6f7420766f746520666f72207468656972206f7760448201526c6e207375626d697373696f6e2160981b60648201526084016104df565b6007544210156111bf5760405162461bcd60e51b815260206004820152603560248201527f43616e206e6f7420737461727420766f74696e6720756e74696c207375626d696044820152747373696f6e20706572696f64206973206f7665722160581b60648201526084016104df565b6009544211156112115760405162461bcd60e51b815260206004820152601a60248201527f46616e20566f74696e6720506572696f64206973204f7665722100000000000060448201526064016104df565b60008181526029602052604081208054829061123d57634e487b7160e01b600052603260045260246000fd5b9060005260206000200154116112a35760405162461bcd60e51b815260206004820152602560248201527f546865726520617265206e6f204e46547320696e2074686973207375626d697360448201526473696f6e2160d81b60648201526084016104df565b6001546023546040516323b872dd60e01b81526001600160a01b03909216916323b872dd916112d891339130916004016121c2565b602060405180830381600087803b1580156112f257600080fd5b505af1158015611306573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061132a9190612023565b61138d5760405162461bcd60e51b815260206004820152602e60248201527f7472616e6466657246726f6d206661696c65642c20766f7465206e6f7420626160448201526d636b65642062792066756e64732160901b60648201526084016104df565b60015b6000828152602960205260409020600301548110156114695760008281526029602052604090206002018054829081106113da57634e487b7160e01b600052603260045260246000fd5b60009182526020909120600290910201546001600160a01b03163314156114575760405162461bcd60e51b815260206004820152602b60248201527f557365722068617320616c726561647920766f74656420666f7220746869732060448201526a7375626d697373696f6e2160a81b60648201526084016104df565b8061146181612650565b915050611390565b506040805180820182523381526023546020808301918252600085815260298252938420600280820180546001808201835591885293872086519490920290910180546001600160a01b0319166001600160a01b0390941693909317835592519190920155838352600301805491926114e183612650565b909155505060235460008381526029602052604081206003015490919061150a906001906125fe565b61151491906125df565b6016549091506000805b600a81101561158c5782601682600a811061154957634e487b7160e01b600052603260045260246000fd5b0154101561157a57601681600a811061157257634e487b7160e01b600052603260045260246000fd5b015492508091505b8061158481612650565b91505061151e565b506000805b600a8110156116035786600c82600a81106115bc57634e487b7160e01b600052603260045260246000fd5b015414156115f1576001915084601682600a81106115ea57634e487b7160e01b600052603260045260246000fd5b0155611603565b806115fb81612650565b915050611591565b50801580156116335750601682600a811061162e57634e487b7160e01b600052603260045260246000fd5b015484115b156116c25783601683600a811061165a57634e487b7160e01b600052603260045260246000fd5b015585600c83600a811061167e57634e487b7160e01b600052603260045260246000fd5b01556040517f29cddc1bc547ec52a5d235ce59b1486ca88ca0628749716343e7ec2fe9eb46f8906116b9903090600490600590600c90612226565b60405180910390a15b7fa279f508257ac833a0fb3550fc0ef0623bc2e0977e3d1791cd53273343bab3bf30600460058933896040516116fd96959493929190612479565b60405180910390a1505050505050565b600c81600a811061048a57600080fd5b600a54421161177e5760405162461bcd60e51b815260206004820152602760248201527f43616e206e6f7420636173686f757420756e74696c2063616d706169676e206960448201526673206f7665722160c81b60648201526084016104df565b6000546001600160a01b03163314156117ef5760405162461bcd60e51b815260206004820152602d60248201527f506f6f6c204f776e6572206d75737420636173686f757420766961207365747460448201526c1b1a5b99c818dbdb9d1c9858dd609a1b60648201526084016104df565b8061183c5760405162461bcd60e51b815260206004820152601c60248201527f5468657265206973206e6f207a65726f207375626d697373696f6e210000000060448201526064016104df565b60008060005b6000848152602960205260409020600301548110156118cd57600084815260296020526040902060020180543391908390811061188f57634e487b7160e01b600052603260045260246000fd5b60009182526020909120600290910201546001600160a01b031614156118bb57600192508091506118cd565b806118c581612650565b915050611842565b5060008381526029602052604081206002018054839081106118ff57634e487b7160e01b600052603260045260246000fd5b9060005260206000209060020201600101549050600060296000868152602001908152602001600020600201838154811061194a57634e487b7160e01b600052603260045260246000fd5b90600052602060002090600202016001018190555082801561196a575081155b15611b025760015460405163a9059cbb60e01b8152336004820152602481018390526001600160a01b039091169063a9059cbb90604401602060405180830381600087803b1580156119bb57600080fd5b505af11580156119cf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119f39190612023565b6119fc57600080fd5b6022548414611afd5760005b6003811015611ac757600254600086815260296020526040902080546001600160a01b03909216916323b872dd91309133919086908110611a5957634e487b7160e01b600052603260045260246000fd5b90600052602060002001546040518463ffffffff1660e01b8152600401611a82939291906121c2565b600060405180830381600087803b158015611a9c57600080fd5b505af1158015611ab0573d6000803e3d6000fd5b505050508080611abf90612650565b915050611a08565b5060408051606081018252600080825260208083018290528284018290528782526029905291909120611afb916003611f2d565b505b611be7565b8215611b955760015460405163a9059cbb60e01b8152336004820152602481018390526001600160a01b039091169063a9059cbb90604401602060405180830381600087803b158015611b5457600080fd5b505af1158015611b68573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b8c9190612023565b611afd57600080fd5b60405162461bcd60e51b815260206004820152602160248201527f5573657220776173206e6f7420666f756e6420696e207375626d697373696f6e6044820152602160f81b60648201526084016104df565b7ff2cb6e8ad7120180a3b9e171738081a6cb4c9b56aed5fbb35687f9d3cea142d730600460058733604051610edc9594939291906123a6565b611c28611f6d565b60408051610140810191829052600c805482529091600a90600d6020850180831161045d575050505050905090565b6000546001600160a01b03163314611c815760405162461bcd60e51b81526004016104df90612594565b60285460ff1615611cd45760405162461bcd60e51b815260206004820152601d60248201527f506f6f6c20616c7265616479206261636b65642062792066756e64732100000060448201526064016104df565b6001546006546040516323b872dd60e01b81526001600160a01b03909216916323b872dd91611d0991339130916004016121c2565b602060405180830381600087803b158015611d2357600080fd5b505af1158015611d37573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d5b9190612023565b611dbe5760405162461bcd60e51b815260206004820152602e60248201527f7472616e6466657246726f6d206661696c65642c20706f6f6c206e6f7420626160448201526d636b65642062792066756e64732160901b60648201526084016104df565b6028805460ff191660019081179091556040517f0b8bbd80daf66bbd8f47f16497629c353fe2619570ea082faea56cb9391fb42291611e0591309160049160059190612314565b60405180910390a1565b6060602080548060200260200160405190810160405280929190818152602001828054801561038b576020028201919060005260206000209081548152602001906001019080831161045d575050505050905090565b600480546103a290612615565b611e7a611f6d565b604080516101408101918290526016805482529091600a9060176020850180831161045d575050505050905090565b828054611eb590612615565b90600052602060002090601f016020900481019282611ed75760008555611f1d565b82601f10611ef057805160ff1916838001178555611f1d565b82800160010185558215611f1d579182015b82811115611f1d578251825591602001919060010190611f02565b50611f29929150611f8c565b5090565b828054828255906000526020600020908101928215611f1d579160200282015b82811115611f1d578251829060ff16905591602001919060010190611f4d565b604051806101400160405280600a906020820280368337509192915050565b5b80821115611f295760008155600101611f8d565b600060608284031215611fb2578081fd5b82601f830112611fc0578081fd5b6040516060810181811067ffffffffffffffff82111715611fe357611fe3612681565b604052808360608101861015611ff7578384fd5b835b6003811015612018578135835260209283019290910190600101611ff9565b509195945050505050565b600060208284031215612034578081fd5b81518015158114612043578182fd5b9392505050565b60006020828403121561205b578081fd5b5051919050565b600060208284031215612073578081fd5b813567ffffffffffffffff8082111561208a578283fd5b818401915084601f83011261209d578283fd5b8135818111156120af576120af612681565b604051601f8201601f19908116603f011681019083821181831017156120d7576120d7612681565b816040528281528760208487010111156120ef578586fd5b826020860160208301379182016020019490945295945050505050565b60006020828403121561211d578081fd5b5035919050565b8054600090600181811c908083168061213e57607f831692505b602080841082141561215e57634e487b7160e01b86526022600452602486fd5b83885260208801828015612179576001811461218a576121b5565b60ff198716825282820197506121b5565b60008981526020902060005b878110156121af57815484820152908601908401612196565b83019850505b5050505050505092915050565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b038416815260606020820181905260009061220a90830185612124565b828103604084015261221c8185612124565b9695505050505050565b6001600160a01b03851681526101a060208083018290526000919061224d84830188612124565b915083820360408501526122618287612124565b92506060840191508460005b600a81101561228a5781548452928201926001918201910161226d565b5050505095945050505050565b6001600160a01b0385168152608060208083018290526000916122bc90840187612124565b83810360408501526122ce8187612124565b84810360608601528554808252868552838520925090830190845b81811015612305578354835260019384019392850192016122e9565b50909998505050505050505050565b6001600160a01b038516815260806020820181905260009061233890830186612124565b828103604084015261234a8186612124565b915050821515606083015295945050505050565b6001600160a01b038516815260806020820181905260009061238290830186612124565b82810360408401526123948186612124565b91505082606083015295945050505050565b600060018060a01b03808816835260a060208401526123c860a0840188612124565b83810360408501526123da8188612124565b60608501969096525092909216608090910152509392505050565b6001600160a01b03878116825261010060208084018290526000929061241d8584018b612124565b92508483036040860152612431838a612124565b9350876060860152818716608086015260a08501925085915060005b600381101561246a5782518452928101929181019160010161244d565b50505050979650505050505050565b600060018060a01b03808916835260c0602084015261249b60c0840189612124565b83810360408501526124ad8189612124565b60608501979097525093909316608082015260a00152509392505050565b6101408101818360005b600a8110156124f45781518352602092830192909101906001016124d5565b50505092915050565b6020808252825182820181905260009190848201906040850190845b8181101561253557835183529284019291840191600101612519565b50909695505050505050565b6000602080835283518082850152825b8181101561256d57858101830151858201604001528201612551565b8181111561257e5783604083870101525b50601f01601f1916929092016040019392505050565b6020808252602b908201527f4f6e6c792074686520506f6f6c204f776e65722063616e2063616c6c2074686960408201526a732066756e6374696f6e2160a81b606082015260800190565b60008160001904831182151516156125f9576125f961266b565b500290565b6000828210156126105761261061266b565b500390565b600181811c9082168061262957607f821691505b6020821081141561264a57634e487b7160e01b600052602260045260246000fd5b50919050565b60006000198214156126645761266461266b565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fdfea26469706673582212207bf78c342af5cf6fcf515115e6912e1edd4669df79e8e63ebaf6a7c1ba40522564736f6c63430008040033a26469706673582212205b15765381fef3fd49cb263319aa7824e893a58e3cac542d151d0cecc17cd92c64736f6c63430008040033",
  "devdoc": {
    "events": {
      "PoolCreated(address,address,uint256,uint256,uint256,uint256,uint256)": {
        "details": "emitted when a pool is created",
        "params": {
          "BrandVotingEndTime": "unix timestamp for when the brand voting period is over",
          "CampaignEndtime": "unix timestamp for when the campaign is over",
          "FanVotingEndTime": "unix timestamp for when the fan voting period is over",
          "Pool": "the address of the pool",
          "PoolId": "the id this pool is stored under in poolList*",
          "PoolOwner": "the address of the pool owner",
          "SubmissionEndTime": "unix timestamp for when the submission period is over"
        }
      }
    },
    "kind": "dev",
    "methods": {
      "createPool(string,uint256,address,address,uint256,uint256,uint256,uint256)": {
        "details": "Allows caller to create a custom brand pool, as long as they are verified, and have approved the contract to spend 0.1 Link  TODO add require checks to make sure inputs are logical*"
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/PoolFactory.sol:PoolFactory",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 3870,
        "contract": "contracts/PoolFactory.sol:PoolFactory",
        "label": "allowPoolCreation",
        "offset": 20,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 3874,
        "contract": "contracts/PoolFactory.sol:PoolFactory",
        "label": "poolList",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 3876,
        "contract": "contracts/PoolFactory.sol:PoolFactory",
        "label": "poolCount",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 3878,
        "contract": "contracts/PoolFactory.sol:PoolFactory",
        "label": "TWITTER_VERIFY_ADDRESS",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 3881,
        "contract": "contracts/PoolFactory.sol:PoolFactory",
        "label": "twitterVerify",
        "offset": 0,
        "slot": "4",
        "type": "t_contract(iTwitterVerify)3848"
      },
      {
        "astId": 3884,
        "contract": "contracts/PoolFactory.sol:PoolFactory",
        "label": "rng",
        "offset": 0,
        "slot": "5",
        "type": "t_contract(iRNG)3866"
      },
      {
        "astId": 3887,
        "contract": "contracts/PoolFactory.sol:PoolFactory",
        "label": "link",
        "offset": 0,
        "slot": "6",
        "type": "t_contract(linkToken)3860"
      },
      {
        "astId": 3889,
        "contract": "contracts/PoolFactory.sol:PoolFactory",
        "label": "LINK_CONTRACT_ADDRESS",
        "offset": 0,
        "slot": "7",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(iRNG)3866": {
        "encoding": "inplace",
        "label": "contract iRNG",
        "numberOfBytes": "20"
      },
      "t_contract(iTwitterVerify)3848": {
        "encoding": "inplace",
        "label": "contract iTwitterVerify",
        "numberOfBytes": "20"
      },
      "t_contract(linkToken)3860": {
        "encoding": "inplace",
        "label": "contract linkToken",
        "numberOfBytes": "20"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}